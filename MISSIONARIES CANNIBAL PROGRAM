from collections import deque

class State:
    def _init_(self, missionaries, cannibals, boat):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat

    def is_valid(self):
        if self.missionaries < 0 or self.cannibals < 0:
            return False
        if self.missionaries < self.cannibals and self.missionaries > 0:
            return False
        if 3 - self.missionaries < 3 - self.cannibals and 3 - self.missionaries > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0

    def _eq_(self, other):
        return (
            self.missionaries == other.missionaries
            and self.cannibals == other.cannibals
            and self.boat == other.boat
        )

    def _hash_(self):
        return hash((self.missionaries, self.cannibals, self.boat))

def get_successors(state):
    successors = []
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    for m, c in moves:
        if state.boat == 1:
            successor = State(
                state.missionaries - m,
                state.cannibals - c,
                1 - state.boat,
            )
        else:
            successor = State(
                state.missionaries + m,
                state.cannibals + c,
                1 - state.boat,
            )
        if successor.is_valid():
            successors.append(successor)
    return successors

def breadth_first_search():
    initial_state = State(3, 3, 1)
    goal_state = State(0, 0, 0)

    frontier = deque([initial_state])
    explored = set()

    while frontier:
        current_state = frontier.popleft()
        if current_state.is_goal():
            return get_solution_path(initial_state, current_state)
        explored.add(current_state)

        for successor in get_successors(current_state):
            if successor not in explored and successor not in frontier:
                frontier.append(successor)

    return None

def get_solution_path(initial_state, goal_state):
    path = []
    current_state = goal_state
    while current_state != initial_state:
        path.append(current_state)
        found = False
        for successor in get_successors(current_state):
            if successor == current_state:
                current_state = successor
                found = True
                break
        if not found:
            # No valid successor found, backtrack
            path.pop()
            current_state = path[-1]
    path.append(initial_state)
    return path[::-1]

def print_solution_path(path):
    for i, state in enumerate(path):
        print(
            f"Step {i + 1}: {state.missionaries} missionaries, {state.cannibals} cannibals, boat on side {state.boat}"
        )

if __name__ == "__main__":
    solution_path = breadth_first_search()
    if solution_path:
        print("Solution found!")
        print_solution_path(solution_path)
    else:
        print("No solution found.")
